package org.camunda.training;

import io.camunda.zeebe.client.ZeebeClient;
import io.camunda.zeebe.client.api.worker.JobWorker;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProvider;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProviderBuilder;
import io.camunda.zeebe.spring.client.annotation.Deployment;
import org.camunda.training.workers.ChargeCreditCardWorker;
import org.camunda.training.workers.CreditDeductionWorker;
import org.camunda.training.workers.PaymentCompletionWorker;
import org.camunda.training.workers.PaymentInvocationWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.time.Duration;
import java.util.Arrays;
import java.util.Map;
import java.util.Scanner;

@SpringBootApplication
@Deployment(resources = "classpath:*.bpmn")

public class PaymentApplication {

  static Logger LOGGER = LoggerFactory.getLogger(PaymentApplication.class);

  public enum ZEEBECONNECTION {NONE, IDENTITY, CLOUD}

  ;
  public static ZEEBECONNECTION zeebeConnectionMode = ZEEBECONNECTION.IDENTITY;

  // ----------------------------- Cloud
  private static final String ZEEBECLOUD_ADDRESS = "25fdd1e6-e4a1-4362-b49c-5eced08cb893.ont-1.zeebe.camunda.io:443";
  private static final String ZEEBECLOUD_CLIENT_ID = "OuRHzG9aeC1uRVn.nqKkBVuYuHRNtdk-";
  private static final String ZEEBECLOUD_CLIENT_SECRET = "xA4fV-8vkm9~nL3Nph3qIUHujeYYzY_n8ntLynheQa-cYUP620j2y.t.qq-PIO8s";
  private static final String ZEEBECLOUD_AUTHORIZATION_SERVER_URL = "https://login.cloud.camunda.io/oauth/token";
  private static final String ZEEBECLOUD_TOKEN_AUDIENCE = "zeebe.camunda.io";

  // ----------------------------- None authorization
  private static final String ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";

  // ----------------------------- Identity (multi tenancy) authorization

  // Define in Identity : connect to localhost:8084 and create a client in Application
  // Open Identity at http://localhost:8084/. Login with demo/demo.
  //Go to Applications > Add Application.
  //Select M2M. Call it "worker".
  //Click on the newly created "worker".
  //Go to "Tenants". Click "Assign Tenant". Select the Default Tenant.
  //Go to "Access to APIs". Click "Assign Permissions". Select "Zeebe API", then enable "write:*".
  //Go to "Application details", and copy the Client ID and Client secret.
  private static final String ZEEBEMULTITENANCY_AUTHORIZATION_SERVER_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";
  private static final String ZEEBEMULTITENANCY_TOKEN_AUDIENCE2 = "zeebe.camunda.io";
  private static final String ZEEBEMULTITENANCY_CLIENT_ID2 = "modeler";
  // Generated by Identity
  private static final String ZEEBEMULTITENANCY_CLIENT_SECRET2 = "CGhjFCqNgbENvmwdj9QYNaknjIbwfrf2";
  private static final String ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";


  private static final String ZEEBEMULTITENANCY_TOKEN_AUDIENCE = "zeebe-api";
  private static final String ZEEBEMULTITENANCY_CLIENT_ID = "zeebe";
  private static final String ZEEBEMULTITENANCY_CLIENT_SECRET = "zecret";



  private static final String ZEEBEMULTITENANCY_TENANT_ID = "<default>";
  private static final boolean ZEEBEMULTITENANCY_SECURE_CONNECTION = false;
  private static final String ZEEBEMULTITENANCY_CAMUNDA_CREDENTIALS_SCOPES = "Zeebe";
  private static final String ZEEBEMULTITENANCY_CAMUNDA_OAUTH_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";

  public static void main(String[] args) {

    ZeebeClient client = null;

    switch (zeebeConnectionMode) {
    case IDENTITY -> {
      OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBEMULTITENANCY_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBEMULTITENANCY_TOKEN_AUDIENCE)
          .clientId(ZEEBEMULTITENANCY_CLIENT_ID)
          .clientSecret(ZEEBEMULTITENANCY_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .defaultJobWorkerTenantIds(Arrays.asList("<default>", "red"))
          .build();
      LOGGER.info("Identity connection");
    }

    case CLOUD -> {

      final OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBECLOUD_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBECLOUD_TOKEN_AUDIENCE)
          .clientId(ZEEBECLOUD_CLIENT_ID)
          .clientSecret(ZEEBECLOUD_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBECLOUD_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .build();
      LOGGER.info("Cloud connection");
    }
    case NONE -> {
      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBE_BROKER_GATEWAY_ADDRESS)
          .usePlaintext()
          .defaultJobWorkerMaxJobsActive(10)
          .defaultJobTimeout(Duration.ofMillis(5 * 60 * 1000))
          .numJobWorkerExecutionThreads(10)
          .build();

      LOGGER.info("Local connection");
    }
    }
    JobWorker creditCardWorker=null;
    JobWorker creditCardChargingWorker=null;
    JobWorker paymentInvocationWorker=null;
    JobWorker paymentCompletionWorker=null;
    try {

      // Request the Cluster Topology
      LOGGER.info("Connected to: " + client.newTopologyRequest().send().join());

      // Start a Job Worker
      creditCardWorker = client.newWorker()
          .jobType("credit-deduction")
          .handler(new CreditDeductionWorker())
          .open();

      // Start a Job Worker
      creditCardChargingWorker = client.newWorker()
          .jobType("credit-card-charging")
          .handler(new ChargeCreditCardWorker())
          .open();

      // Start a Job Worker
       paymentInvocationWorker = client.newWorker()
          .jobType("payment-invocation")
          .handler(new PaymentInvocationWorker(client))
          .open();

       paymentCompletionWorker = client.newWorker()
          .jobType("payment-completion")
          .handler(new PaymentCompletionWorker(client))
          .open();



      // Create a process instance - not in a tenant...
       client.newCreateInstanceCommand()
           .bpmnProcessId("PaymentProcess")
           .latestVersion()
           .variables(Map.of("customerCredit", 100))
           .send()
           .join();

      // SpringApplication.run(PaymentApplication.class, args);

      // Terminate the worker with an Integer input
      Scanner sc = new Scanner(System.in);
      sc.nextInt();
      sc.close();
      creditCardWorker.close();
      creditCardChargingWorker.close();

    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (creditCardWorker!=null)
      creditCardWorker.close();
      if (creditCardWorker!=null)
      creditCardWorker.close();
      if (creditCardChargingWorker!=null)
      paymentInvocationWorker.close();
      if (paymentCompletionWorker!=null)
      paymentCompletionWorker.close();

    }
  }
}
