package org.camunda.training;

import io.camunda.zeebe.client.CredentialsProvider;
import io.camunda.zeebe.client.ZeebeClient;
import io.camunda.zeebe.client.api.command.CreateProcessInstanceCommandStep1;
import io.camunda.zeebe.client.api.response.ProcessInstanceEvent;
import io.camunda.zeebe.client.api.worker.JobWorker;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProvider;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProviderBuilder;
import io.camunda.zeebe.spring.client.annotation.Deployment;
import io.grpc.Metadata;
import org.camunda.training.workers.ChargeCreditCardWorker;
import org.camunda.training.workers.CheckUniqueTid;
import org.camunda.training.workers.CreditDeductionWorker;
import org.camunda.training.workers.PaymentCompletionWorker;
import org.camunda.training.workers.PaymentInvocationWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.IOException;
import java.time.Duration;
import java.util.Map;
import java.util.Scanner;

@SpringBootApplication
@Deployment(resources = "classpath:*.bpmn")

public class PaymentApplication {

  static Logger LOGGER = LoggerFactory.getLogger(PaymentApplication.class);

  public enum ZEEBECONNECTION {LOCAL, IDENTITY, CLOUD, MULTITENANCY}

  ;
  public static ZEEBECONNECTION zeebeConnectionMode = ZEEBECONNECTION.LOCAL;

  // ----------------------------- Cloud
  private static final String ZEEBECLOUD_ADDRESS = "25fdd1e6-e4a1-4362-b49c-5eced08cb893.ont-1.zeebe.camunda.io:443";
  private static final String ZEEBECLOUD_CLIENT_ID = "OuRHzG9aeC1uRVn.nqKkBVuYuHRNtdk-";
  private static final String ZEEBECLOUD_CLIENT_SECRET = "xA4fV-8vkm9~nL3Nph3qIUHujeYYzY_n8ntLynheQa-cYUP620j2y.t.qq-PIO8s";
  private static final String ZEEBECLOUD_AUTHORIZATION_SERVER_URL = "https://login.cloud.camunda.io/oauth/token";
  private static final String ZEEBECLOUD_TOKEN_AUDIENCE = "zeebe.camunda.io";

  // ----------------------------- None authorization
  private static final String ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";

  // ----------------------------- Identity (multi tenancy) authorization

  // Define in Identity : connect to localhost:8084 and create a client in Application
  // Open Identity at http://localhost:8084/. Login with demo/demo.
  private static final String ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";
  private static final String ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";
  private static final String ZEEBEIDENTITY_TOKEN_AUDIENCE = "zeebe-api";
  // Generated by Identity:
  //Go to Applications > Add Application.
  //Select M2M. Call it "worker".
  //Click on the newly created "worker".
  //Go to "Tenants". Click "Assign Tenant". Select the Default Tenant.
  //Go to "Access to APIs". Click "Assign Permissions". Select "Zeebe API", then enable "write:*".
  //Go to "Application details", and copy the Client ID and Client secret.
  private static final String ZEEBEIDENTITY_CLIENT_ID = "worker";
  private static final String ZEEBEIDENTITY_CLIENT_SECRET = "x6WecnO6seKJ6kTeLQ0BPqf5YQ5JQk5G";

  // private static final String ZEEBEMULTITENANCY_TENANT_ID = "<default>";
  // private static final boolean ZEEBEMULTITENANCY_SECURE_CONNECTION = false;
  // private static final String ZEEBEMULTITENANCY_CAMUNDA_CREDENTIALS_SCOPES = "Zeebe";
  // private static final String ZEEBEMULTITENANCY_CAMUNDA_OAUTH_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";

  public static void main(String[] args) {

    ZeebeClient client = null;

    // JDK 11 form
    if (zeebeConnectionMode.equals(ZEEBECONNECTION.IDENTITY)) {
      OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBEIDENTITY_TOKEN_AUDIENCE)
          .clientId(ZEEBEIDENTITY_CLIENT_ID)
          .clientSecret(ZEEBEIDENTITY_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .usePlaintext()
          .build();
      LOGGER.info("Identity connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.MULTITENANCY)) {
      OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBEIDENTITY_TOKEN_AUDIENCE)
          .clientId(ZEEBEIDENTITY_CLIENT_ID)
          .clientSecret(ZEEBEIDENTITY_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .usePlaintext()
          // .defaultJobWorkerTenantIds(Arrays.asList("<default>", "red"))
          .build();
      LOGGER.info("Identity(Multitenancy) connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.CLOUD)) {
      final OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBECLOUD_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBECLOUD_TOKEN_AUDIENCE)
          .clientId(ZEEBECLOUD_CLIENT_ID)
          .clientSecret(ZEEBECLOUD_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBECLOUD_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .build();
      LOGGER.info("Cloud connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.LOCAL)) {
      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBE_BROKER_GATEWAY_ADDRESS)
          .usePlaintext()
          .defaultJobWorkerMaxJobsActive(10)
          .defaultJobTimeout(Duration.ofMillis(5 * 60 * 1000))
          .numJobWorkerExecutionThreads(10)
          .defaultJobTimeout(Duration.ofMinutes(15))
          .build();
      LOGGER.info("Local connection");
    }

    JobWorker creditCardWorker = null;
    JobWorker creditCardChargingWorker = null;
    JobWorker paymentInvocationWorker = null;
    JobWorker paymentCompletionWorker = null;
    JobWorker checkUniqueTid= null;

    try {
      // Request the Cluster Topology
      LOGGER.info("Connected to: " + client.newTopologyRequest().send().join());

      // Start a Job Worker
      creditCardWorker = client.newWorker().jobType("credit-deduction").handler(new CreditDeductionWorker()).open();

      // Start a Job Worker
      creditCardChargingWorker = client.newWorker()
          .jobType("credit-card-charging")
          .handler(new ChargeCreditCardWorker())
          .open();

      // Start a Job Worker
      paymentInvocationWorker = client.newWorker()
          .jobType("payment-invocation")
          .handler(new PaymentInvocationWorker(client))
          .open();

      paymentCompletionWorker = client.newWorker()
          .jobType("payment-completion")
          .handler(new PaymentCompletionWorker(client))
          .open();


      // Start a Job Worker
      checkUniqueTid = client.newWorker().jobType("check-unique-tid").handler(new CheckUniqueTid()).open();


      // Create a process instance
      // createProcessInstance(client, "PaymentProcess", Map.of("customerCredit", 100), "red");
      // default
      // createProcessInstance(client, "PaymentProcess", Map.of("customerCredit", 100), null);
      createProcessInstance(client, "ThrowErrors", Map.of("customerCredit", 100), null);
      createProcessInstance(client, "ThrowErrors", Map.of("customerCredit", 100), "<default>");


      // org.camunda.training.SpringApplication.run(PaymentApplication.class, args);

      // Terminate the worker with an Integer input
      Scanner sc = new Scanner(System.in);
      sc.nextInt();
      sc.close();
      creditCardWorker.close();
      creditCardChargingWorker.close();

    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (creditCardWorker != null)
        creditCardWorker.close();
      if (creditCardWorker != null)
        creditCardWorker.close();
      if (creditCardChargingWorker != null)
        paymentInvocationWorker.close();
      if (paymentCompletionWorker != null)
        paymentCompletionWorker.close();

    }
  }

  /**
   * Create a process intances
   *
   * @param zeebeClient zeebeClient
   * @param processId   processID where the instance must be created
   * @param variables   process variables
   * @param tenantId    tenant (if ZeebeConnectionMode == ZEEBECONNECTION.MULTITENANCY and tenantId !=null
   */
  public static ProcessInstanceEvent createProcessInstance(ZeebeClient zeebeClient,
                                                           String processId,
                                                           Map variables,
                                                           String tenantId) {
    try {
      CreateProcessInstanceCommandStep1.CreateProcessInstanceCommandStep3 processInstanceStep3 = zeebeClient.newCreateInstanceCommand()
          .bpmnProcessId(processId)
          .latestVersion()
          .variables(variables);

      if (zeebeConnectionMode.equals(ZEEBECONNECTION.MULTITENANCY) && tenantId != null) {
        processInstanceStep3 = processInstanceStep3.tenantId(tenantId);
      }

      ProcessInstanceEvent processInstance = processInstanceStep3.send().join();
      LOGGER.info("Create PI[{}] in Process[{}] Tenant[{}]", processInstance.getProcessInstanceKey(), processId,
          tenantId);
      return processInstance;
    } catch (Exception e) {
      LOGGER.info("ERROR Create PI in Process[{}] Tenant[{}] : {}", processId, tenantId, e.getMessage());
      return null;
    }
  }

  /*
  private class MyOwnAuthentication implements CredentialsProvider {

    OAuthCredentialsProvider credentialsProvider;

    MyOwnAuthentication(final OAuthCredentialsProvider credentialsProvider) {
      this.credentialsProvider = credentialsProvider;
    }

    /**
     * Adds credentials to the headers. For an example of this, see {@link
     * OAuthCredentialsProvider#applyCredentials(Metadata)}
     *
     * @param headers gRPC headers to be modified
     *
    public void applyCredentials(Metadata headers) throws IOException {
      credentialsProvider.applyCredentials(headers);
    }

    /**
     * Returns true if the request should be retried; otherwise returns false. For an example of this,
     * see {@link OAuthCredentialsProvider#shouldRetryRequest(Throwable)}
     *
     * @param throwable error that caused the request to fail
     *
    @Override
    public boolean shouldRetryRequest(Throwable throwable) {
      return false;
    }

    @Override
    public void applyCredentials(CredentialsApplier applier) throws IOException {

    }

    @Override
    public boolean shouldRetryRequest(StatusCode statusCode) {
      return false;
    }
  }
*/
}
